
package clienta;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.OpenOption;
import java.security.InvalidKeyException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.SignatureException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.bouncycastle.openpgp.PGPException;
import org.bouncycastle.openpgp.PGPPrivateKey;
import org.bouncycastle.openpgp.PGPPublicKey;

/**
 * 
 * @author Gerald Joshua
 * This class shows the sending of encrypted messages and to client B
 * it also shows the receiving of decrypted message from client B
 * client B acts as a server as well
 */
public class ClientA extends javax.swing.JFrame {
    
    // socket object to connect server
    Socket socket;
    
    //input output object to interact with server
    ObjectInputStream oin;
    ObjectOutputStream out;
    
    PGPKeys PGPkeys;
    
    //Attached file
    String fileToBeEnc=null;
    
    private boolean asciiArmored = true;
 
    private boolean integrityCheck = true;
    
    
    /**
     * Creates new form ClientA
     */
    public ClientA() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaCertificate = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        btnConnectB = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtaSend = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtaRecEnc = new javax.swing.JTextArea();
        btnSend = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        filePath = new javax.swing.JTextField();
        attachFile = new javax.swing.JButton();
        btnDecrypt = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jtaDecRec = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Client A");

        jtaCertificate.setColumns(20);
        jtaCertificate.setRows(5);
        jScrollPane1.setViewportView(jtaCertificate);

        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 0, 18)); // NOI18N
        jLabel1.setText("~Client A~");

        btnConnectB.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnConnectB.setText("Connect to Client B");
        btnConnectB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectBActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Certificate exhange & public key verification");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Send Text or File Message(not both at the same time) ");

        jtaSend.setColumns(20);
        jtaSend.setRows(5);
        jScrollPane2.setViewportView(jtaSend);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Encrypted Message Received");

        jtaRecEnc.setColumns(20);
        jtaRecEnc.setRows(5);
        jScrollPane4.setViewportView(jtaRecEnc);

        btnSend.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSend.setText("SEND");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        jScrollPane5.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        filePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filePathActionPerformed(evt);
            }
        });
        jScrollPane5.setViewportView(filePath);

        attachFile.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        attachFile.setText("Attachment");
        attachFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attachFileActionPerformed(evt);
            }
        });

        btnDecrypt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnDecrypt.setText("DECRYPT");
        btnDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecryptActionPerformed(evt);
            }
        });

        jtaDecRec.setColumns(20);
        jtaDecRec.setRows(5);
        jScrollPane6.setViewportView(jtaDecRec);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Decrypted received message");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6)
                    .addComponent(jScrollPane4)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDecrypt))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSend))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                        .addComponent(btnConnectB))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(attachFile))
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnConnectB)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(attachFile))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                        .addComponent(btnSend)
                        .addGap(28, 28, 28)))
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDecrypt)
                .addGap(3, 3, 3)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void filePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filePathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filePathActionPerformed

    private void attachFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attachFileActionPerformed
        JFileChooser choose = new JFileChooser();
        choose.showOpenDialog(null);
        File f = choose.getSelectedFile();
        if(f!=null){
           fileToBeEnc = f.getAbsolutePath();
           filePath.setText(fileToBeEnc);
        }
        
    }//GEN-LAST:event_attachFileActionPerformed

    private void btnDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecryptActionPerformed
        
        FileInputStream in = null;
        try {
            in = new FileInputStream("ecryptedreceieved.txt");
            PGPDecryption.decryptFile(this,in,PGPkeys.getSenderPub(),PGPkeys.getSenderPriv());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ClientA.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | PGPException ex) {
            Logger.getLogger(ClientA.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                in.close();
            } catch (IOException ex) {
                Logger.getLogger(ClientA.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        File encrec = new File("ecryptedreceieved.txt");
        encrec.delete();
        File myFile = new File("DecryptedFile.txt");
        try (Scanner myReader = new Scanner(myFile)) {
        while (myReader.hasNextLine()) {
                String data = myReader.nextLine();
                jtaDecRec.append("\n");
                jtaDecRec.append(data);
            }
            myReader.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ClientA.class.getName()).log(Level.SEVERE, null, ex);
        }
        jtaRecEnc.setText("");
    }//GEN-LAST:event_btnDecryptActionPerformed

    private void btnConnectBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectBActionPerformed
        try{
            //we passed ip address of client B and port number
            socket = new Socket(Settings.ip_Address,Settings.port);
            JOptionPane.showMessageDialog(this, "connected to client b..check certification text box below");
            jtaCertificate.append("connected to client B \n");
            
            //input and output readers;
            InputStream is = socket.getInputStream();
            OutputStream os = socket.getOutputStream();
            jtaCertificate.append("Awaiting ClientB's certificate \n");
            File myFile = new File ("clientB.p12");
            oin = new ObjectInputStream(is);
            byte[] content = (byte[]) oin.readObject();
            Files.write(myFile.toPath(), content);
            jtaCertificate.append("receiving clientB's certificate \n");
            jtaCertificate.append("receiving complete \n");
            
            //Send certA to clientB;
            jtaCertificate.append("Sending clientA certificate \n");
            myFile = new File ("clientA.p12");
            out = new ObjectOutputStream(os);
            content = Files.readAllBytes(myFile.toPath());
            out.writeObject(content);
            jtaCertificate.append("Sending complete \n");
            jtaCertificate.append("verifying clientA's certificate using CA's public key \n");
            
            //verify if certificate received is client's B
            //load certificate B and load CA certificate's public key
            if(LoadAndVerifyRecCert()){
                jtaCertificate.append("verification successful \n");
                //continue with read and write reader for this socket;
                PGPkeys = new PGPKeys();
                openReader(is,os);
            }
            else{
                jtaCertificate.append("verification failed \n");
            }
            
                
            
        }catch(Exception e){
            e.printStackTrace();
        }
        
        
    }//GEN-LAST:event_btnConnectBActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        try{
            if(fileToBeEnc!=null){
                FileOutputStream fos = new FileOutputStream("EncryptedMessage.txt");
                PGPEncryption.EncrypFile(fileToBeEnc,fos,PGPkeys.getReceiverPub(),PGPkeys.getSenderPub(),PGPkeys.getSenderPriv(),asciiArmored,integrityCheck);
                File myFile = new File ("EncryptedMessage.txt");
                byte[] content = Files.readAllBytes(myFile.toPath());
                out.writeObject(content);
                myFile.delete();
            }
            else{
                FileWriter write = new FileWriter("input.txt");
                PrintWriter print_line = new PrintWriter(write);
                print_line.printf( "%s" + "%n" , jtaSend.getText());
                print_line.close();
                //InputStream inputStream = new ByteArrayInputStream(jtaSend.getText().getBytes(Charset.forName("UTF-8")));
                FileOutputStream fos = new FileOutputStream("EncryptedMessage.txt");
                PGPEncryption.EncrypFile("input.txt",fos,PGPkeys.getReceiverPub(),PGPkeys.getSenderPub(),PGPkeys.getSenderPriv(),asciiArmored,integrityCheck);
                File file = new File("input.txt");
                file.delete();
                File myFile = new File ("EncryptedMessage.txt");
                byte[] content = Files.readAllBytes(myFile.toPath());
                out.writeObject(content);
                myFile.delete();
            }
            //out.writeObject(jtaSend.getText());
            jtaSend.setText("");
            filePath.setText("");
        }catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSendActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientA().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton attachFile;
    private javax.swing.JButton btnConnectB;
    private javax.swing.JButton btnDecrypt;
    private javax.swing.JButton btnSend;
    public javax.swing.JTextField filePath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    public javax.swing.JTextArea jtaCertificate;
    public javax.swing.JTextArea jtaDecRec;
    public javax.swing.JTextArea jtaRecEnc;
    public javax.swing.JTextArea jtaSend;
    // End of variables declaration//GEN-END:variables

    private boolean LoadAndVerifyRecCert() throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException, InvalidKeyException, NoSuchProviderException, SignatureException {
        KeyStore bK = KeyStore.getInstance("PKCS12");
        bK.load(new FileInputStream(new File("CAPubKey.p12")),new char[0]);
	X509Certificate Cert = (X509Certificate) bK.getCertificate("CAPubKey");
         if (Cert == null) {
            throw new RuntimeException("Got null cert from keystore!");
        }
        
        //load certificatee B;
        KeyStore bKs = KeyStore.getInstance("PKCS12");
        bKs.load(new FileInputStream(new File("clientB.p12")), new char[0]);
	X509Certificate bCert = (X509Certificate) bKs.getCertificate("Client B");
        if (bCert == null) {
            throw new RuntimeException("Got null cert from keystore!");
        }
        //Verifying Cert B with CA's pulblic key obtain in certificate A.
        
		
	bCert.verify(Cert.getPublicKey());
        return true;
    }

    private void openReader(InputStream is, OutputStream os) {
       try{
            out = new ObjectOutputStream(os);
            
            oin = new ObjectInputStream(is);
            //msgrecthread for client and call it herer
            MsgRecThread mrt = new MsgRecThread(this,oin,out);
        }catch (Exception e){
            e.printStackTrace();
        } 
    }

    public void signaturePast(boolean verified) {
        if(verified){
            JOptionPane.showMessageDialog(this, "Signature verified");      
        }
        else{
            JOptionPane.showMessageDialog(this, "Signature verification failed");
        }
        
    }

    public void justSignedOrTypeUnknown(boolean signedOrUnknown) {
        if(signedOrUnknown){
           JOptionPane.showMessageDialog(this, "encrypted message contains a signed message - not literal data."); 
        }
        else{
            JOptionPane.showMessageDialog(this, "message is not a simple encrypted file - type unknown.");
        }
        
    }

    public void integrityCheck(boolean verified) {
        if(verified){
            JOptionPane.showMessageDialog(this, "message integrity check passed");
        }
        else{
            JOptionPane.showMessageDialog(this, "no message integrity check");
        }
        
    }
    public void integrityCheck() {
      JOptionPane.showMessageDialog(this, "no message integrity check");  
    }
    
    //class within
    //extend thread so as to make it thread
    public class MsgRecThread extends Thread{
        ClientA ca; 
        ObjectInputStream oin; 
        ObjectOutputStream out;
        public MsgRecThread(ClientA ca, ObjectInputStream oin, ObjectOutputStream out){
            this.ca = ca;
            this.oin = oin;
            this.out = out;
            //start thread;
            start();
        }
        
        public void run(){
            //to receive messages continously
            while(true){
                try{
                    //append(encrypted message)
                    File myFile = new File("ecryptedreceieved.txt");
                    byte[] content = (byte[])this.oin.readObject();
                    Files.write(myFile.toPath(), content);
                    try (final Scanner myReader = new Scanner(myFile)) {
                        while (myReader.hasNextLine()) {
                            String data = myReader.nextLine();
                            jtaRecEnc.append("\n");
                            jtaRecEnc.append(data);
                        }
                        myReader.close();
                    }
                    //jtaRecEnc.append(oin.readObject().toString() + "\n");
                    
                    //recieval of decrypted text
                    //System.out.println("from client B: "+ oin.readObject().toString());
                    //System.out.println("you can type p to send message or end to quit sending messages");
                }catch(Exception e){
                    e.printStackTrace();
                }
            }
        }
    }
}
